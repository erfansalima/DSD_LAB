// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/09/2023 02:35:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    WaitingRoom
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module WaitingRoom_vlg_sample_tst(
	clk,
	clr,
	Ent,
	IN,
	OUT,
	T,
	sampler_tx
);
input  clk;
input  clr;
input  Ent;
input  IN;
input  OUT;
input  T;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clr or Ent or IN or OUT or T)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module WaitingRoom_vlg_check_tst (
	close,
	open,
	Q,
	sampler_rx
);
input  close;
input  open;
input [3:0] Q;
input sampler_rx;

reg  close_expected;
reg  open_expected;
reg [3:0] Q_expected;

reg  close_prev;
reg  open_prev;
reg [3:0] Q_prev;

reg  close_expected_prev;
reg  open_expected_prev;
reg [3:0] Q_expected_prev;

reg  last_close_exp;
reg  last_open_exp;
reg [3:0] last_Q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	close_prev = close;
	open_prev = open;
	Q_prev = Q;
end

// update expected /o prevs

always @(trigger)
begin
	close_expected_prev = close_expected;
	open_expected_prev = open_expected;
	Q_expected_prev = Q_expected;
end


// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 

// expected open
initial
begin
	open_expected = 1'bX;
end 

// expected close
initial
begin
	close_expected = 1'bX;
end 
// generate trigger
always @(close_expected or close or open_expected or open or Q_expected or Q)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected close = %b | expected open = %b | expected Q = %b | ",close_expected_prev,open_expected_prev,Q_expected_prev);
	$display("| real close = %b | real open = %b | real Q = %b | ",close_prev,open_prev,Q_prev);
`endif
	if (
		( close_expected_prev !== 1'bx ) && ( close_prev !== close_expected_prev )
		&& ((close_expected_prev !== last_close_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port close :: @time = %t",  $realtime);
		$display ("     Expected value = %b", close_expected_prev);
		$display ("     Real value = %b", close_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_close_exp = close_expected_prev;
	end
	if (
		( open_expected_prev !== 1'bx ) && ( open_prev !== open_expected_prev )
		&& ((open_expected_prev !== last_open_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port open :: @time = %t",  $realtime);
		$display ("     Expected value = %b", open_expected_prev);
		$display ("     Real value = %b", open_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_open_exp = open_expected_prev;
	end
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module WaitingRoom_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg Ent;
reg IN;
reg OUT;
reg T;
// wires                                               
wire close;
wire open;
wire [3:0] Q;

wire sampler;                             

// assign statements (if any)                          
WaitingRoom i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.close(close),
	.clr(clr),
	.Ent(Ent),
	.IN(IN),
	.open(open),
	.OUT(OUT),
	.Q(Q),
	.T(T)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// clr
initial
begin
	clr = 1'b0;
	clr = #10000 1'b1;
	clr = #680000 1'b0;
	clr = #60000 1'b1;
end 

// Ent
initial
begin
	Ent = 1'b0;
	Ent = #10000 1'b1;
	Ent = #340000 1'b0;
	Ent = #170000 1'b1;
	Ent = #40000 1'b0;
	Ent = #230000 1'b1;
	Ent = #40000 1'b0;
	Ent = #110000 1'b1;
end 

// IN
initial
begin
	IN = 1'b0;
	IN = #20000 1'b1;
	IN = #330000 1'b0;
	IN = #170000 1'b1;
	IN = #40000 1'b0;
	IN = #230000 1'b1;
	IN = #40000 1'b0;
	IN = #110000 1'b1;
end 

// OUT
initial
begin
	OUT = 1'b0;
	OUT = #360000 1'b1;
	OUT = #270000 1'b0;
end 

// T
initial
begin
	T = 1'b0;
	T = #10000 1'b1;
	T = #930000 1'b0;
end 

WaitingRoom_vlg_sample_tst tb_sample (
	.clk(clk),
	.clr(clr),
	.Ent(Ent),
	.IN(IN),
	.OUT(OUT),
	.T(T),
	.sampler_tx(sampler)
);

WaitingRoom_vlg_check_tst tb_out(
	.close(close),
	.open(open),
	.Q(Q),
	.sampler_rx(sampler)
);
endmodule

