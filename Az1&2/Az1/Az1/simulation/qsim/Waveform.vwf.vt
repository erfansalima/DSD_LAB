// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/06/2023 03:14:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Az1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Az1_vlg_sample_tst(
	D0,
	D1,
	D2,
	D3,
	sampler_tx
);
input [3:0] D0;
input [3:0] D1;
input [3:0] D2;
input [3:0] D3;
output sampler_tx;

reg sample;
time current_time;
always @(D0 or D1 or D2 or D3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Az1_vlg_check_tst (
	R3,
	R11,
	sampler_rx
);
input  R3;
input  R11;
input sampler_rx;

reg  R3_expected;
reg  R11_expected;

reg  R3_prev;
reg  R11_prev;

reg  R3_expected_prev;
reg  R11_expected_prev;

reg  last_R3_exp;
reg  last_R11_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	R3_prev = R3;
	R11_prev = R11;
end

// update expected /o prevs

always @(trigger)
begin
	R3_expected_prev = R3_expected;
	R11_expected_prev = R11_expected;
end



// expected R3
initial
begin
	R3_expected = 1'bX;
end 

// expected R11
initial
begin
	R11_expected = 1'bX;
end 
// generate trigger
always @(R3_expected or R3 or R11_expected or R11)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected R3 = %b | expected R11 = %b | ",R3_expected_prev,R11_expected_prev);
	$display("| real R3 = %b | real R11 = %b | ",R3_prev,R11_prev);
`endif
	if (
		( R3_expected_prev !== 1'bx ) && ( R3_prev !== R3_expected_prev )
		&& ((R3_expected_prev !== last_R3_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R3_exp = R3_expected_prev;
	end
	if (
		( R11_expected_prev !== 1'bx ) && ( R11_prev !== R11_expected_prev )
		&& ((R11_expected_prev !== last_R11_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R11_expected_prev);
		$display ("     Real value = %b", R11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R11_exp = R11_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Az1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] D0;
reg [3:0] D1;
reg [3:0] D2;
reg [3:0] D3;
// wires                                               
wire R3;
wire R11;

wire sampler;                             

// assign statements (if any)                          
Az1 i1 (
// port map - connection between master ports and signals/registers   
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.R3(R3),
	.R11(R11)
);
// D0[ 3 ]
initial
begin
	D0[3] = 1'b0;
	D0[3] = #320000 1'b1;
	D0[3] = #80000 1'b0;
	D0[3] = #320000 1'b1;
	D0[3] = #40000 1'b0;
end 
// D0[ 2 ]
initial
begin
	D0[2] = 1'b0;
	D0[2] = #160000 1'b1;
	D0[2] = #160000 1'b0;
	D0[2] = #240000 1'b1;
	D0[2] = #160000 1'b0;
	D0[2] = #240000 1'b1;
end 
// D0[ 1 ]
initial
begin
	repeat(2)
	begin
		D0[1] = 1'b0;
		D0[1] = #80000 1'b1;
		# 80000;
	end
	D0[1] = 1'b0;
	D0[1] = #160000 1'b1;
	# 80000;
	repeat(2)
	begin
		D0[1] = 1'b0;
		D0[1] = #80000 1'b1;
		# 80000;
	end
	D0[1] = 1'b0;
	D0[1] = #80000 1'b1;
end 
// D0[ 0 ]
initial
begin
	repeat(4)
	begin
		D0[0] = 1'b0;
		D0[0] = #40000 1'b1;
		# 40000;
	end
	D0[0] = 1'b0;
	D0[0] = #40000 1'b1;
	D0[0] = #40000 1'b0;
	D0[0] = #40000 1'b1;
	# 40000;
	repeat(6)
	begin
		D0[0] = 1'b0;
		D0[0] = #40000 1'b1;
		# 40000;
	end
	D0[0] = 1'b0;
end 
// D1[ 3 ]
initial
begin
	D1[3] = 1'b0;
	D1[3] = #120000 1'b1;
	D1[3] = #40000 1'b0;
	D1[3] = #40000 1'b1;
	D1[3] = #40000 1'b0;
	D1[3] = #280000 1'b1;
	D1[3] = #40000 1'b0;
	D1[3] = #40000 1'b1;
	D1[3] = #40000 1'b0;
	D1[3] = #120000 1'b1;
	D1[3] = #40000 1'b0;
end 
// D1[ 2 ]
initial
begin
	D1[2] = 1'b0;
	D1[2] = #40000 1'b1;
	D1[2] = #80000 1'b0;
	D1[2] = #160000 1'b1;
	D1[2] = #40000 1'b0;
	D1[2] = #40000 1'b1;
	D1[2] = #40000 1'b0;
	D1[2] = #40000 1'b1;
	D1[2] = #80000 1'b0;
	D1[2] = #200000 1'b1;
	D1[2] = #40000 1'b0;
	D1[2] = #80000 1'b1;
	D1[2] = #40000 1'b0;
	D1[2] = #40000 1'b1;
	D1[2] = #40000 1'b0;
end 
// D1[ 1 ]
initial
begin
	D1[1] = 1'b0;
	D1[1] = #160000 1'b1;
	D1[1] = #40000 1'b0;
	D1[1] = #40000 1'b1;
	D1[1] = #80000 1'b0;
	D1[1] = #40000 1'b1;
	D1[1] = #40000 1'b0;
	D1[1] = #160000 1'b1;
	D1[1] = #40000 1'b0;
	D1[1] = #40000 1'b1;
	D1[1] = #40000 1'b0;
end 
// D1[ 0 ]
initial
begin
	D1[0] = 1'b0;
	D1[0] = #40000 1'b1;
	D1[0] = #40000 1'b0;
	D1[0] = #40000 1'b1;
	D1[0] = #80000 1'b0;
	D1[0] = #80000 1'b1;
	D1[0] = #80000 1'b0;
	D1[0] = #80000 1'b1;
	D1[0] = #40000 1'b0;
	D1[0] = #40000 1'b1;
	D1[0] = #80000 1'b0;
	D1[0] = #80000 1'b1;
	D1[0] = #40000 1'b0;
	D1[0] = #40000 1'b1;
	# 40000;
	repeat(2)
	begin
		D1[0] = 1'b0;
		D1[0] = #40000 1'b1;
		# 40000;
	end
	D1[0] = 1'b0;
end 
// D2[ 3 ]
initial
begin
	D2[3] = 1'b0;
	D2[3] = #240000 1'b1;
	D2[3] = #40000 1'b0;
	D2[3] = #80000 1'b1;
	D2[3] = #40000 1'b0;
	D2[3] = #240000 1'b1;
	D2[3] = #40000 1'b0;
end 
// D2[ 2 ]
initial
begin
	D2[2] = 1'b0;
	D2[2] = #40000 1'b1;
	D2[2] = #80000 1'b0;
	D2[2] = #80000 1'b1;
	D2[2] = #40000 1'b0;
	D2[2] = #80000 1'b1;
	D2[2] = #40000 1'b0;
	D2[2] = #80000 1'b1;
	D2[2] = #80000 1'b0;
	D2[2] = #80000 1'b1;
	D2[2] = #40000 1'b0;
	D2[2] = #40000 1'b1;
	D2[2] = #80000 1'b0;
	D2[2] = #40000 1'b1;
	D2[2] = #40000 1'b0;
	D2[2] = #40000 1'b1;
	D2[2] = #40000 1'b0;
	D2[2] = #40000 1'b1;
end 
// D2[ 1 ]
initial
begin
	D2[1] = 1'b0;
	D2[1] = #80000 1'b1;
	D2[1] = #40000 1'b0;
	D2[1] = #40000 1'b1;
	D2[1] = #80000 1'b0;
	D2[1] = #40000 1'b1;
	D2[1] = #40000 1'b0;
	D2[1] = #160000 1'b1;
	D2[1] = #40000 1'b0;
	D2[1] = #40000 1'b1;
	# 80000;
	repeat(2)
	begin
		D2[1] = 1'b0;
		D2[1] = #80000 1'b1;
		# 80000;
	end
	D2[1] = 1'b0;
end 
// D2[ 0 ]
initial
begin
	D2[0] = 1'b1;
	D2[0] = #40000 1'b0;
	D2[0] = #40000 1'b1;
	D2[0] = #40000 1'b0;
	D2[0] = #40000 1'b1;
	D2[0] = #40000 1'b0;
	D2[0] = #40000 1'b1;
	D2[0] = #40000 1'b0;
	D2[0] = #40000 1'b1;
	D2[0] = #40000 1'b0;
	D2[0] = #40000 1'b1;
	D2[0] = #40000 1'b0;
	D2[0] = #40000 1'b1;
	D2[0] = #40000 1'b0;
	# 40000;
	repeat(5)
	begin
		D2[0] = 1'b1;
		D2[0] = #40000 1'b0;
		# 40000;
	end
	D2[0] = 1'b1;
end 
// D3[ 3 ]
initial
begin
	D3[3] = 1'b0;
	D3[3] = #40000 1'b1;
	D3[3] = #40000 1'b0;
	D3[3] = #200000 1'b1;
	D3[3] = #40000 1'b0;
	D3[3] = #120000 1'b1;
	D3[3] = #40000 1'b0;
	D3[3] = #200000 1'b1;
	D3[3] = #40000 1'b0;
	D3[3] = #80000 1'b1;
	D3[3] = #40000 1'b0;
end 
// D3[ 2 ]
initial
begin
	D3[2] = 1'b0;
	D3[2] = #120000 1'b1;
	D3[2] = #80000 1'b0;
	D3[2] = #120000 1'b1;
	D3[2] = #80000 1'b0;
	D3[2] = #120000 1'b1;
	D3[2] = #80000 1'b0;
	D3[2] = #120000 1'b1;
	D3[2] = #80000 1'b0;
end 
// D3[ 1 ]
initial
begin
	D3[1] = 1'b1;
	D3[1] = #40000 1'b0;
	D3[1] = #80000 1'b1;
	D3[1] = #40000 1'b0;
	D3[1] = #40000 1'b1;
	D3[1] = #40000 1'b0;
	D3[1] = #80000 1'b1;
	D3[1] = #40000 1'b0;
	D3[1] = #40000 1'b1;
	D3[1] = #40000 1'b0;
	D3[1] = #80000 1'b1;
	D3[1] = #40000 1'b0;
	D3[1] = #40000 1'b1;
	D3[1] = #40000 1'b0;
	D3[1] = #80000 1'b1;
	D3[1] = #40000 1'b0;
	D3[1] = #80000 1'b1;
	D3[1] = #40000 1'b0;
	D3[1] = #40000 1'b1;
end 
// D3[ 0 ]
initial
begin
	D3[0] = 1'b0;
	D3[0] = #40000 1'b1;
	D3[0] = #40000 1'b0;
	D3[0] = #40000 1'b1;
	D3[0] = #160000 1'b0;
	D3[0] = #160000 1'b1;
	D3[0] = #40000 1'b0;
	D3[0] = #40000 1'b1;
	D3[0] = #160000 1'b0;
	D3[0] = #40000 1'b1;
	D3[0] = #80000 1'b0;
	D3[0] = #40000 1'b1;
	D3[0] = #80000 1'b0;
end 

Az1_vlg_sample_tst tb_sample (
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.sampler_tx(sampler)
);

Az1_vlg_check_tst tb_out(
	.R3(R3),
	.R11(R11),
	.sampler_rx(sampler)
);
endmodule

